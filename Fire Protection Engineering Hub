<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fire Protection Engineering Hub</title>
    
    <!-- โหลด Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- โหลดฟอนต์ (Sarabun สำหรับภาษาไทย) -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Sarabun:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- ไอคอนจาก Phosphor Icons -->
    <script src="https://unpkg.com/@phosphor-icons/web"></script>

    <style>
        /* กำหนดฟอนต์หลัก */
        body {
            font-family: 'Sarabun', sans-serif;
            background-color: #0c0a18; /* สีพื้นหลังโทนน้ำเงินเข้ม-ดำ */
            overflow: hidden; /* ป้องกัน scrollbar ที่ไม่จำเป็น */
        }
        
        /* สไตล์สำหรับ Canvas ที่เป็นพื้นหลัง */
        #bg-canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1; /* ทำให้ Canvas อยู่ด้านหลังสุด */
        }

        /* สไตล์สำหรับกล่องข้อความแบบกระจกฝ้า */
        .glass-card {
            background: rgba(10, 10, 20, 0.7); /* เพิ่มความเข้มเล็กน้อย */
            backdrop-filter: blur(12px); /* เอฟเฟกต์เบลอ */
            -webkit-backdrop-filter: blur(12px);
            border: 1px solid rgba(255, 255, 255, 0.1); /* เส้นขอบบางๆ */
            box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.4);
        }
    </style>
</head>
<body class="text-gray-200 flex flex-col min-h-screen">

    <!-- Canvas สำหรับพื้นหลังแอนิเมชัน -->
    <canvas id="bg-canvas"></canvas>

    <!-- ส่วนคอนเทนเนอร์หลัก (อยู่เหนือ Canvas) -->
    <main class="flex-grow z-10 relative">
        <div class="container mx-auto px-4 py-12 sm:px-6 lg:px-8">

            <div class="text-center mb-12">
                <!-- ไอคอนหัวเรื่อง -->
                <i class="ph-fill ph-fire text-6xl text-orange-400 mb-4 inline-block"></i>
                
                <!-- หัวข้อหลัก -->
                <h1 class="text-4xl md:text-5xl font-bold text-white">
                    Fire Protection Engineering Hub
                </h1>

                <!-- คำอธิบาย -->
                <p class="text-lg md:text-xl mt-4 text-gray-300">
                    ยินดีต้อนรับสู่หน้า HUB คุณสามารถเพิ่มลิงก์ที่นี่ได้
                </p>
            </div>

            <!-- ส่วนของเครื่องมือและลิงก์ -->
            <div class="max-w-2xl mx-auto">
                <h2 class="text-2xl font-semibold text-orange-400 mb-6 border-b-2 border-gray-700 pb-2">เครื่องมือคำนวณ</h2>
                
                <div class="space-y-4">
                    <!-- ลิงก์ 1: เครื่องคำนวณปั๊มดับเพลิง (อัปเดตแล้ว) -->
                    <a href="https://icvd4cilzlfyco3gkvmnkq187.on.drv.tw/FP%20%E0%B8%A7%E0%B8%B1%E0%B8%A2%E0%B8%A3%E0%B8%B8%E0%B9%88%E0%B8%99%E0%B9%80%E0%B8%8B%E0%B8%B4%E0%B8%99%E0%B9%80%E0%B8%88%E0%B8%B4%E0%B9%89%E0%B8%99%20/Fire%20Pump%20and%20Water%20Tank%20Calculator.html" target="_blank" rel="noopener noreferrer" class="group block glass-card hover:bg-black/70 p-6 rounded-xl transition-all duration-300">
                        <div class="flex items-center">
                            <div class="bg-orange-600/30 p-3 rounded-lg mr-5">
                                <i class="ph-bold ph-calculator text-3xl text-orange-300"></i>
                            </div>
                            <div>
                                <h3 class="text-xl font-bold text-white">เครื่องคำนวณปั๊มดับเพลิงและถังเก็บน้ำ</h3>
                                <p class="text-gray-300 mt-1">คำนวณขนาดปั๊มและถังเก็บน้ำสำหรับระบบดับเพลิง</p>
                            </div>
                            <div class="ml-auto">
                                <i class="ph-bold ph-caret-right text-2xl text-gray-500 group-hover:text-orange-400 transition-colors"></i>
                            </div>
                        </div>
                    </a>

                    <!-- ลิงก์ 2: เครื่องคำนวณ Hydraulic (อัปเดตแล้ว) -->
                    <a href="https://icvd4cilzlfyco3gkvmnkq187.on.drv.tw/FP%20%E0%B8%A7%E0%B8%B1%E0%B8%A2%E0%B8%A3%E0%B8%B8%E0%B9%88%E0%B8%99%E0%B9%80%E0%B8%8B%E0%B8%B4%E0%B8%99%E0%B9%80%E0%B8%88%E0%B8%B4%E0%B9%89%E0%B8%99%20/%E0%B9%80%E0%B8%84%E0%B8%A3%E0%B8%B7%E0%B9%88%E0%B8%AD%E0%B8%87%E0%B8%84%E0%B8%B3%E0%B8%99%E0%B8%A7%E0%B8%93%20Hydraulic%20(Hazen-Williams).html" target="_blank" rel="noopener noreferrer" class="group block glass-card hover:bg-black/70 p-6 rounded-xl transition-all duration-300">
                        <div class="flex items-center">
                            <div class="bg-blue-600/30 p-3 rounded-lg mr-5">
                                <i class="ph-bold ph-function text-3xl text-blue-300"></i>
                            </div>
                            <div>
                                <h3 class="text-xl font-bold text-white">เครื่องคำนวณ Hydraulic (Hazen-Williams)</h3>
                                <p class="text-gray-300 mt-1">คำนวณการสูญเสียแรงดันในท่อด้วยสมการ Hazen-Williams</p>
                            </div>
                             <div class="ml-auto">
                                <i class="ph-bold ph-caret-right text-2xl text-gray-500 group-hover:text-blue-400 transition-colors"></i>
                            </div>
                        </div>
                    </a>
                </div>
                
                <p class="text-center text-gray-400 text-sm mt-8">By วัยรุ่นเซินเจิ้น</p>
            </div>

        </div>
    </main>

    <script>
        // --- JavaScript สำหรับพื้นหลัง "Pendent Sprinkler System" ---
        const canvas = document.getElementById('bg-canvas');
        const ctx = canvas.getContext('2d');

        let width, height;
        let fireParticles = [];
        let waterParticles = [];
        let pipeWaterParticles = []; 
        let branchPipeWaterParticles = []; 
        let sprinklers = [];

        const fireColors = ['#ff4800', '#ff7f00', '#ffd000', '#ff5a00'];
        const waterColors = ['#00aaff', '#0077ff', '#add8e6', '#b0e0e6'];

        function setupSystem() {
            width = canvas.width = window.innerWidth;
            height = canvas.height = window.innerHeight;
            
            sprinklers = []; 
            
            const mainPipeY = 25; 
            const sprinklerY = mainPipeY + 40;
            const radius = 8;

            sprinklers.push({
                x: width * 0.25,
                y: sprinklerY,
                mainPipeY: mainPipeY,
                radius: radius
            });
            sprinklers.push({
                x: width * 0.75,
                y: sprinklerY,
                mainPipeY: mainPipeY,
                radius: radius
            });
            
            pipeWaterParticles = [];
            for(let i=0; i<400; i++) { 
                pipeWaterParticles.push(new PipeWaterParticle(mainPipeY, 16));
            }
            branchPipeWaterParticles = [];
            sprinklers.forEach(s => {
                for(let i=0; i<100; i++) {
                    branchPipeWaterParticles.push(new BranchPipeWaterParticle(s, 10));
                }
            });
        }

        // --- Particle Classes ---
        class FireParticle {
            constructor() {
                this.x = Math.random() * width;
                this.y = height + Math.random() * 50;
                this.vx = (Math.random() - 0.5) * 1.5;
                this.vy = -(Math.random() * 2.5 + 1.5);
                this.radius = Math.random() * 3 + 2;
                this.color = fireColors[Math.floor(Math.random() * fireColors.length)];
                this.life = Math.random() * 80 + 100;
                this.initialLife = this.life;
            }
            update() { this.x += this.vx; this.y += this.vy; this.life--; this.vy *= 0.985; }
            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius * (this.life / this.initialLife), 0, Math.PI * 2);
                ctx.fillStyle = this.color;
                ctx.globalAlpha = this.life / this.initialLife;
                ctx.fill();
                ctx.closePath();
            }
        }

        class WaterParticle {
            constructor(sprinkler) {
                this.x = sprinkler.x;
                this.y = sprinkler.y + sprinkler.radius * 1.7;

                const sprayAngleWidth = Math.PI * 1.2; 
                const baseAngle = Math.PI / 2; 

                const angle = baseAngle + (Math.random() - 0.5) * sprayAngleWidth;
                
                const speed = Math.random() * 6 + 4;

                this.vx = Math.cos(angle) * speed;
                this.vy = Math.sin(angle) * speed;
                
                this.gravity = 0.4; 
                this.radius = Math.random() * 1.2 + 0.5;
                this.life = Math.random() * 80 + 60;
                this.color = waterColors[Math.floor(Math.random() * waterColors.length)];
            }
            update() { this.vy += this.gravity; this.x += this.vx; this.y += this.vy; this.life--; }
            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = this.color;
                ctx.globalAlpha = (this.life / 140) * 0.7;
                ctx.fill();
                ctx.closePath();
            }
        }
        
        class PipeWaterParticle {
            constructor(pipeY, pipeHeight) {
                this.x = Math.random() * width;
                this.y = pipeY - pipeHeight / 2 + Math.random() * pipeHeight;
                this.vx = Math.random() * 2.0 + 1.0; 
                this.radius = Math.random() * 2.0 + 0.5;
                this.color = waterColors[Math.floor(Math.random() * 2)];
                this.opacity = Math.random() * 0.5 + 0.2;
            }
            update() {
                this.x += this.vx;
                if (this.x > width) { this.x = 0; }
            }
            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = this.color;
                ctx.globalAlpha = this.opacity;
                ctx.fill();
            }
        }

        class BranchPipeWaterParticle {
            constructor(sprinkler, pipeWidth) {
                this.sprinkler = sprinkler;
                this.pipeWidth = pipeWidth;
                this.x = this.sprinkler.x - this.pipeWidth / 2 + Math.random() * this.pipeWidth;
                this.y = this.sprinkler.mainPipeY + Math.random() * (this.sprinkler.y - this.sprinkler.mainPipeY);
                this.vy = Math.random() * 1.5 + 0.5; 
                this.radius = Math.random() * 1.5 + 0.5;
                this.color = waterColors[Math.floor(Math.random() * 2)];
                this.opacity = Math.random() * 0.5 + 0.2;
            }
            update() {
                this.y += this.vy;
                if (this.y > this.sprinkler.y) {
                    this.y = this.sprinkler.mainPipeY;
                }
            }
            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = this.color;
                ctx.globalAlpha = this.opacity;
                ctx.fill();
            }
        }

        function init() {
            setupSystem();
            animate();
        }

        function drawPipeSystem() {
            if (sprinklers.length === 0) return;
            
            const mainPipeY = sprinklers[0].mainPipeY;
            const mainPipeHeight = 16;

            const gradient = ctx.createLinearGradient(0, mainPipeY - mainPipeHeight / 2, 0, mainPipeY + mainPipeHeight / 2);
            gradient.addColorStop(0, '#e55e5a');
            gradient.addColorStop(0.5, '#d9534f');
            gradient.addColorStop(1, '#c9302c');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, mainPipeY - mainPipeHeight / 2, width, mainPipeHeight);
            
            pipeWaterParticles.forEach(p => p.draw());

            ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';
            ctx.fillRect(0, mainPipeY - mainPipeHeight / 2, width, 2);
            
            branchPipeWaterParticles.forEach(p => p.draw());

            sprinklers.forEach(s => {
                const branchGradient = ctx.createLinearGradient(s.x - 5, 0, s.x + 5, 0);
                branchGradient.addColorStop(0, '#d9534f');
                branchGradient.addColorStop(0.5, '#c9302c');
                branchGradient.addColorStop(1, '#a94442');
                ctx.fillStyle = branchGradient;
                ctx.fillRect(s.x - 5, s.mainPipeY, 10, s.y - s.mainPipeY);
                ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';
                ctx.fillRect(s.x - 5, s.mainPipeY, 2, s.y - s.mainPipeY);

                ctx.fillStyle = '#a9a9a9'; 
                ctx.fillRect(s.x - 4, s.y - s.radius, 8, s.radius);
                ctx.strokeStyle = '#333';
                ctx.lineWidth = 3; 
                ctx.beginPath();
                ctx.moveTo(s.x - s.radius * 0.8, s.y);
                ctx.lineTo(s.x - s.radius * 0.5, s.y + s.radius * 1.5);
                ctx.lineTo(s.x, s.y + s.radius * 1.8);
                ctx.moveTo(s.x + s.radius * 0.8, s.y);
                ctx.lineTo(s.x + s.radius * 0.5, s.y + s.radius * 1.5);
                ctx.lineTo(s.x, s.y + s.radius * 1.8);
                ctx.stroke();
                ctx.strokeStyle = '#ff0000';
                ctx.lineWidth = 2; 
                ctx.beginPath();
                ctx.moveTo(s.x, s.y);
                ctx.lineTo(s.x, s.y + s.radius * 1.7);
                ctx.stroke();
            });
        }

        function animate() {
            ctx.clearRect(0, 0, width, height);
            ctx.globalAlpha = 1;

            pipeWaterParticles.forEach(p => p.update());
            branchPipeWaterParticles.forEach(p => p.update());
            
            drawPipeSystem();

            if (waterParticles.length < 4000) { 
                sprinklers.forEach(s => {
                    for(let i = 0; i < 20; i++) { 
                        waterParticles.push(new WaterParticle(s));
                    }
                });
            }
            for (let i = waterParticles.length - 1; i >= 0; i--) {
                const p = waterParticles[i];
                p.update();
                p.draw();
                if (p.life <= 0 || p.y > height) {
                    waterParticles.splice(i, 1);
                }
            }
            
            if (fireParticles.length < 250) {
                fireParticles.push(new FireParticle());
            }
            for (let i = fireParticles.length - 1; i >= 0; i--) {
                const p = fireParticles[i];
                p.update();
                let extinguished = false;
                for (let j = 0; j < waterParticles.length; j++) {
                    const wp = waterParticles[j];
                    if (Math.hypot(p.x - wp.x, p.y - wp.y) < p.radius + wp.radius + 15) {
                        p.life -= 5; 
                        break;
                    }
                }
                if (p.life <= 0) {
                    fireParticles.splice(i, 1);
                } else {
                    p.draw();
                }
            }

            requestAnimationFrame(animate);
        }
        
        window.addEventListener('resize', setupSystem);
        init();

    </script>
</body>
</html>
