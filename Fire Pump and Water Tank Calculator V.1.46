<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>คำนวณขนาดปั๊มดับเพลิงและถังเก็บน้ำ (NFPA Guidance) V.1.49 By วัยรุ่นเซินเจิ้น</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
    <style>
        /* Base styles for body and container */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh; /* Reverted to 100vh for better vertical centering */
            padding: 20px;
            box-sizing: border-box;
        }
        .container {
            background-color: #ffffff;
            padding: 32px;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            max-width: 600px;
            width: 100%;
            border: 1px solid #e2e8f0;
            position: relative; /* Added for absolute positioning of version */
        }
        /* Form group and input styling */
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #334155;
        }
        input[type="number"],
        input[type="text"], /* Added style for text input */
        select {
            width: 100%;
            padding: 12px;
            border: 1px solid #cbd5e1;
            border-radius: 8px;
            font-size: 16px;
            color: #475569;
            box-sizing: border-box;
        }
        input[type="number"]:focus,
        input[type="text"]:focus, /* Added style for text input focus */
        select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25);
        }
        /* Button styling */
        .btn-primary {
            width: 100%; /* Default to 100% for general use */
            padding: 12px 20px;
            background-color: #22c55e;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 18px;
            font-weight: 700;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }
        .btn-primary:hover {
            background-color: #16a34a;
            transform: translateY(-2px);
        }
        .btn-primary:active {
            transform: translateY(0);
        }
        .btn-secondary {
            width: 100%;
            padding: 12px 20px;
            background-color: #3b82f6;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 18px;
            font-weight: 700;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }
        .btn-secondary:hover {
            background-color: #2563eb;
            transform: translateY(-2px);
        }
        .btn-secondary:active {
            transform: translateY(0);
        }
        /* New Clear Data Button Style */
        .btn-clear {
            width: 100%; /* Default to 100% for general use */
            padding: 12px 20px;
            background-color: #ef4444; /* Red color */
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 18px;
            font-weight: 700;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }
        .btn-clear:hover {
            background-color: #dc2626;
            transform: translateY(0);
        }
        .btn-clear:active {
            transform: translateY(0);
        }

        /* Results section styling */
        .results-section {
            margin-top: 30px;
            padding: 20px;
            background-color: #f8fafc;
            border: 1px dashed #94a3b8;
            border-radius: 8px;
        }
        .results-section h2 {
            font-size: 24px;
            font-weight: 700;
            color: #1e293b;
            margin-bottom: 15px;
            text-align: center;
        }
        .results-section p {
            font-size: 16px;
            color: #475569;
            margin-bottom: 10px;
            line-height: 1.5;
            font-weight: normal; /* Ensure normal font weight */
        }
        /* Warning and disclaimer styling */
        .warning {
            color: #dc2626;
            background-color: #fef2f2;
            padding: 12px;
            border-radius: 8px;
            margin-top: 20px;
            border: 1px solid #ef4444;
            font-weight: 500;
        }
        .disclaimer {
            font-size: 14px;
            color: #64748b;
            margin-top: 20px;
            text-align: center;
            line-height: 1.4;
        }
        .small-text {
            font-size: 13px;
            color: #64748b;
            margin-top: 5px;
            display: block;
        }
        /* Chart specific styling */
        #pumpCurveChart {
            margin-top: 20px;
            max-height: 400px; /* Increased chart height for better visibility */
        }
        .chart-disclaimer {
            font-size: 12px;
            color: #64748b;
            text-align: center;
            margin-top: 10px;
        }
        .toggle-button {
            background-color: #60a5fa; /* Blue-ish button */
            color: white;
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 14px;
            cursor: pointer;
            border: none;
            transition: background-color 0.2s ease;
            margin-left: 10px;
            display: inline-block; /* Align with text */
            vertical-align: middle; /* Align with text */
        }
        .toggle-button:hover {
            background-color: #3b82f6;
        }
        /* Version text styling */
        .version-text {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 10px; /* Smaller font size */
            color: #94a3b8; /* Lighter color */
            font-weight: 300; /* Thinner font weight */
        }

        /* Print specific styles */
        @media print {
            body {
                background-color: #fff;
                -webkit-print-color-adjust: exact; /* For better color printing on some browsers */
                print-color-adjust: exact;
                display: block; /* Override flex for printing */
                min-height: auto; /* Allow content to flow */
                height: auto; /* Allow content to flow */
            }
            .container {
                box-shadow: none;
                border: none;
                max-width: none; /* Allow full width */
                width: auto; /* Allow auto width */
                padding: 0; /* Remove padding */
                margin: 0; /* Remove margin */
            }
            /* Hide buttons and disclaimer on print */
            button, .disclaimer, .print-pdf-buttons, .toggle-button, .btn-clear { /* Added .btn-clear */
                display: none !important;
            }
            /* Ensure pump definition section is visible and well formatted on its own page (Page 3) */
            #pump_definition_section { /* Renamed for clarity */
                page-break-before: always;
                margin-top: 0 !important;
                padding-top: 0 !important;
                width: 100%;
            }
            /* Ensure chart section is visible and well formatted on its own page (Page 4) */
            #chart_section { /* New section for chart */
                page-break-before: always;
                margin-top: 0 !important;
                padding-top: 0 !important;
                width: 100%;
            }
            /* Force page break before calculation summary section */
            #calculation_summary_section {
                page-break-before: always;
                margin-top: 0 !important;
                padding-top: 0 !important;
                width: 100%;
            }
            .results-section {
                border: none; /* Remove border for print */
                background-color: #fff; /* White background */
                padding: 0; /* No padding */
            }

            /* Hide calculation explanations and description column on print */
            #sprinkler_flow_calculation_row, #tank_volume_calculation_row, #demand_head_calculation_row, #total_flow_calculation_row, #hose_allowance_calculation_row { /* Added #total_flow_calculation_row and #hose_allowance_calculation_row */
                display: none !important; /* Hide these rows on print */
            }

            /* Hide the "คำอธิบาย" column in the results table for print */
            #results table th:nth-child(3),
            #results table td:nth-child(3) {
                display: none !important;
            }

            .chart-disclaimer {
                display: block !important;
                font-size: 10px !important; /* Even smaller font for disclaimer */
                color: #333 !important;
            }
            #demand_head_display_container { /* This is now a tr, but the ID is on the span */
                font-weight: normal; /* Changed from bold to normal for print */
            }
            /* --- FORCE RED COLOR FOR PRINTED VALUES --- */
            #demand_head_display,
            #total_flow {
                color: #dc2626 !important; /* Red-600 */
            }
            /* --- END FORCE RED COLOR --- */

            /* General print adjustments for other elements */
            h1, h2, h3 {
                color: #000 !important;
                text-align: left !important; /* Left align headings for print readability */
                margin-bottom: 10px !important;
                font-size: 20px !important; /* Adjust heading size */
            }
            .results-section h2 {
                 text-align: left !important;
                 font-size: 18px !important;
            }
            .results-section p { /* This rule will now only affect the area name display */
                font-size: 14px !important;
                color: #000 !important;
                margin-bottom: 5px !important;
                font-weight: normal !important;
            }
            #area_name_display {
                display: block !important;
                margin-bottom: 10px;
                font-size: 14px !important;
                color: #000 !important;
                font-weight: normal !important; /* Ensure normal font weight for print */
            }

            /* Chart specific adjustments for print */
            #pumpCurveChart {
                margin-top: 15px !important;
                max-height: 400px !important; /* Give more height for better chart rendering */
                width: 100% !important;
            }

            /* Graph Summary Section for Print */
            #graph_summary {
                display: block !important; /* Ensure it's always displayed on print */
                margin-top: 15px !important;
                font-size: 12px !important; /* Adjust font size for print */
                color: #000 !important; /* Black for print */
            }
            #graph_summary h4 {
                font-size: 16px !important; /* Smaller heading for summary */
                margin-bottom: 5px !important;
                text-align: left !important;
            }
            #graph_summary ul {
                list-style-type: disc;
                margin-left: 20px !important;
            }
            #graph_summary li {
                margin-bottom: 3px !important;
                line-height: 1.3 !important;
            }

            /* Table for print */
            #calculation_summary_table,
            #results table { /* Apply to both tables */
                display: table !important; /* Ensure table is displayed */
                width: 100% !important;
                margin-top: 20px !important;
                border-collapse: collapse;
            }

            #calculation_summary_table th,
            #calculation_summary_table td,
            #results table th,
            #results table td { /* Apply to both tables */
                border: 1px solid #ccc;
                padding: 8px;
                text-align: left;
                font-size: 12px !important;
                font-weight: normal !important; /* Ensure normal font weight for table cells */
            }

            #calculation_summary_table th,
            #results table th { /* Apply to both tables */
                background-color: #f2f2f2 !important; /* Ensure background color is preserved */
                font-weight: normal !important; /* Ensure normal font weight for table headers */
                color: #334155 !important; /* Explicitly set to original header text color */
            }

            /* Ensure span colors within table cells are preserved */
            #calculation_summary_table td span,
            #results table td span { /* Apply to both tables */
                color: inherit !important; /* Inherit color from parent, which will be the original Tailwind color */
            }
            /* Version text should be visible on print */
            .version-text {
                display: block !important; /* Changed to block to make it visible */
                position: absolute; /* Keep it positioned */
                top: 10px;
                right: 10px;
                font-size: 10px;
                color: #000 !important; /* Black for print */
                font-weight: 300;
            }
        </style>
</head>
<body>
    <div class="container">
        <div class="version-text">V.1.49</div> <!-- Updated version text here -->
        <h1 class="text-3xl font-bold text-center text-gray-800 mb-6">
            คำนวณขนาดปั๊มดับเพลิงและถังเก็บน้ำ <br> (NFPA Guidance) By วัยรุ่นเซินเจิ้น
        </h1>
        <p class="disclaimer mb-6">
            เครื่องมือนี้ใช้สำหรับการประมาณการเบื้องต้นเท่านั้น ไม่สามารถใช้ทดแทนการออกแบบโดยวิศวกรผู้เชี่ยวชาญได้
            การออกแบบระบบจริงต้องพิจารณาปัจจัยทางวิศวกรรมที่ซับซับซ้อนอื่นๆ เสมอ
        </p>

        <div class="form-group" id="area_name_group">
            <label for="area_name">ชื่อ/รายละเอียดพื้นที่:</label>
            <input type="text" id="area_name" placeholder="เช่น ห้อง Generator Room ชั้น 1" class="rounded-lg shadow-sm">
        </div>

        <div class="form-group" id="hazard_class_group">
            <label for="hazard_class">เลือกประเภทอันตราย (Occupancy Hazard Classification):</label>
            <select id="hazard_class" class="rounded-lg shadow-sm">
                <option value="light">Light Hazard (อันตรายน้อย)</option>
                <option value="ordinary1">Ordinary Hazard Group 1 (อันตรายปานกลาง กลุ่ม 1)</option>
                <option value="ordinary2">Ordinary Hazard Group 2 (อันตรายปานกลาง กลุ่ม 2)</option>
                <option value="extra1">Extra Hazard Group 1 (อันตรายมาก กลุ่ม 1)</option>
                <option value="extra2">Extra Hazard Group 2 (อันตรายมาก กลุ่ม 2)</option>
            </select>
        </div>

        <div class="form-group" id="design_area_group">
            <label for="design_area">พื้นที่ป้องกัน (Design Area - ตร.ม.):</label>
            <input type="number" id="design_area" placeholder="เช่น 139.4 ตร.ม." min="0.1" step="0.1" class="rounded-lg shadow-sm">
            <small class="small-text print-hide"> <!-- Added print-hide class here -->
                อ้างอิง NFPA 13 (2025) <span id="table_19_2_3_1_1_link" class="text-blue-600 hover:text-blue-800 cursor-pointer" onclick="showImagePopup('https://img2.pic.in.th/pic/Screenshot-2025-07-16-004620.png')">Table 19.2.3.1.1</span> <br>
                Light/Ordinary Hazard ไม่เกิน 140 ตร.ม. (ประมาณ 1500 ตร.ฟุต) สำหรับสปริงเกลอร์มาตรฐาน <br>
                Extra Hazard ไม่เกิน 230 ตร.M. (ประมาณ 2500 ตร.ฟุต) สำหรับสปริงเกลอร์มาตรฐาน
            </small>
        </div>

        <div class="form-group" id="duration_group">
            <label for="duration">ระยะเวลาการจ่ายน้ำขั้นต่ำ (นาที):</label>
            <select id="duration" class="rounded-lg shadow-sm">
                <option value="30">30 นาที (สำหรับ Light Hazard)</option>
                <option value="60">60 นาที (สำหรับ Ordinary Hazard Group 1, Ordinary Hazard Group 2)</option>
                <option value="90">90 นาที (สำหรับ Extra Hazard Group 1)</option>
                <option value="120">120 นาที (สำหรับ Extra Hazard Group 2)</option>
            </select>
            <small class="small-text print-hide">อ้างอิง NFPA 13 (2025) Table <span id="table_19_2_3_1_2_link" class="text-blue-600 hover:text-blue-800 cursor-pointer" onclick="showImagePopup('https://img5.pic.in.th/file/secure-sv1/Screenshot-2025-07-16-003636.png')">19.2.3.1.2</span></small>
        </div>

        <!-- Updated button container to display buttons side-by-side -->
        <div class="flex flex-row justify-between gap-x-4 mb-4">
            <button onclick="calculate()" class="btn-primary rounded-lg shadow-md w-1/2">คำนวณ</button>
            <button onclick="clearData()" class="btn-clear rounded-lg shadow-md w-1/2">ล้างข้อมูล</button>
        </div>

        <div id="results_page" class="pt-8">
            <div id="results" class="results-section">
                <h2>ผลการคำนวณ:</h2>
                <p id="area_name_display" style="display:none;">
                    <span>สำหรับพื้นที่:</span> <span id="display_area_name"></span>
                </p>
                <table class="w-full border-collapse border border-gray-300 rounded-lg overflow-hidden">
                    <thead>
                        <tr class="bg-gray-100">
                            <th class="py-2 px-4 border-b border-gray-300 text-left text-gray-700 font-normal">รายการ</th>
                            <th class="py-2 px-4 border-b border-gray-300 text-left text-gray-700 font-normal">ค่า</th>
                            <!-- Removed "คำอธิบาย" column header -->
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="py-2 px-4 border-b border-gray-300 text-base">อัตราการไหลของน้ำดับเพลิง (Sprinkler)</td>
                            <td class="py-2 px-4 border-b border-gray-300 text-base"><span id="sprinkler_flow">0.00</span> GPM</td>
                            <!-- Removed "ดูวิธีการคำนวณ" button -->
                        </tr>
                        <tr class="hidden" id="sprinkler_flow_calculation_row">
                            <td colspan="2" class="py-2 px-4 border-b border-gray-300 text-base small-text" id="sprinkler_flow_calculation_cell"></td>
                        </tr>
                        <!-- Added Hose Stream Allowance row -->
                        <tr id="hose_allowance_row">
                            <td class="py-2 px-4 border-b border-gray-300 text-base">อัตราการไหลสำหรับท่อยืน (Hose Stream Allowance)</td>
                            <td class="py-2 px-4 border-b border-gray-300 text-base"><span id="hose_allowance">0.00</span> GPM</td>
                        </tr>
                        <tr class="hidden" id="hose_allowance_calculation_row">
                            <td colspan="2" class="py-2 px-4 border-b border-gray-300 text-base small-text" id="hose_allowance_calculation_cell"></td>
                        </tr>
                        <tr id="total_flow_row">
                            <td class="py-2 px-4 border-b border-gray-300 text-base">อัตราการไหลรวมที่ต้องการ</td>
                            <td class="py-2 px-4 border-b border-gray-300 text-red-600 text-base"><span id="total_flow">0.00</span> GPM</td>
                            <!-- Removed "ดูวิธีการคำนวณ" button -->
                        </tr>
                        <tr class="hidden" id="total_flow_calculation_row">
                            <td colspan="2" class="py-2 px-4 border-b border-gray-300 text-base small-text" id="total_flow_calculation_cell"></td>
                        </tr>
                        <!-- Removed demand_head_row and demand_head_calculation_row as requested -->
                        <tr id="actual_duration_row"> <!-- Moved this row up -->
                            <td class="py-2 px-4 border-b border-gray-300 text-base">เวลากักเก็บน้ำที่คำนวณ</td>
                            <td class="py-2 px-4 border-b border-gray-300 text-base"><span id="actual_duration">0</span> นาที</td>
                            <!-- Removed empty td -->
                        </tr>
                        <tr id="tank_volume_row"> <!-- Moved this row down -->
                            <td class="py-2 px-4 border-b border-gray-300 text-base">ขนาดถังเก็บน้ำที่ต้องการ</td>
                            <td class="py-2 px-4 border-b border-gray-300 text-base"><span id="tank_volume">0.00</span> ลบ.ม.</td>
                            <!-- Removed "ดูวิธีการคำนวณ" button -->
                        </tr>
                        <tr class="hidden" id="tank_volume_calculation_row">
                            <td colspan="2" class="py-2 px-4 border-b border-gray-300 text-base small-text" id="tank_volume_calculation_cell"></td>
                        </tr>
                    </tbody>
                </table>
                <div class="warning hidden" id="warning_message"></div>
            </div>
        </div>

        <div id="pump_definition_section" class="pt-8"> <!-- Renamed ID -->
            <h3 class="text-xl font-bold text-center text-gray-700 mb-4">
                กำหนดขนาดปั้ม
            </h3>
            <!-- New Pump Type Selection -->
            <div class="form-group" id="pump_type_group">
                <label for="pump_type">เลือกชนิดปั๊ม:</label>
                <select id="pump_type" class="rounded-lg shadow-sm">
                    <option value="horizontal">Horizontal Split Case Fire Pump</option>
                    <option value="vertical">Vertical Turbine Fire Pump</option>
                </select>
            </div>
            <!-- End New Pump Type Selection -->
            <div class="form-group">
                <label for="pump_rated_flow">กำหนดอัตราไหลของปั๊ม (GPM):</label>
                <input type="number" id="pump_rated_flow" placeholder="เช่น 750 GPM" min="0" step="10" class="rounded-lg shadow-sm">
                <small class="small-text print-hide">อัตราไหลของปั้มที่ต้องการ (Rated Flow)</small>
            </div>
            <div class="form-group">
                <label for="system_demand_head">แรงดันต้องการของระบบ (PSI):</label>
                <input type="number" id="system_demand_head" placeholder="เช่น 100 PSI" min="0" step="1" class="rounded-lg shadow-sm">
                <small class="small-text print-hide">ค่าแรงดันของระบบ = Static head + Residual pressure + Friction loss</small>
            </div>
            <!-- Updated button container for "สร้างกราฟ" -->
            <div class="flex justify-center mb-4">
                <button onclick="calculate()" class="btn-primary rounded-lg shadow-md w-1/2">สร้างกราฟ</button>
            </div>
        </div>

        <div id="chart_section" class="pt-8"> <!-- New section for chart and related elements -->
            <!-- Moved chart and its disclaimer here -->
            <canvas id="pumpCurveChart"></canvas>
            <p class="chart-disclaimer">
                * กราฟนี้เป็นเพียงการจำลอง Performance Curve อย่างง่าย ไม่ใช่ข้อมูลจำเพาะที่แท้จริง โปรดอ้างอิงข้อมูลจากผู้ผลิต
            </p>

            <div id="graph_summary" class="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                <h4 class="text-lg font-semibold text-blue-800 mb-3">
                    คำอธิบายกราฟ:
                    <!-- Removed "ดูคำอธิบาย" button -->
                </h4>
                <div id="graph_summary_content"> <!-- Removed 'hidden' class here -->
                    <ul class="list-none ml-5 text-gray-700 text-xs"> <!-- Changed text-sm to text-xs here -->
                        <li><span style="color: rgba(0, 170, 170, 1);">━</span> Performance Curve จำลอง: ความสัมพันธ์ระหว่างอัตราการไหลและแรงดันของปั๊ม (จำลองจาก Rated Flow และแรงดันกำหนดที่ผู้ใช้ป้อน)</li>
                        <li><span style="color: rgba(255, 0, 0, 1);">▲</span> อัตราไหลรวมที่ต้องการ (Water Demand): จุดปฏิบัติงานที่คำนวณได้จากปริมาณน้ำสปริงเกลอร์บวกกับปริมาณน้ำท่อยืน ที่แรงดันต้องการของระบบ (System Demand Head)</li>
                        <li><span style="color: rgba(0, 0, 255, 1);">🔵</span> จุดกำหนดของปั๊ม (Rated Point): จุดประสิทธิภาพสูงสุดตามสเปก (Rated Flow, แรงดันกำหนดที่ผู้ใช้ป้อน)</li>
                        <li id="shut_off_head_description"><span style="color: rgb(128, 0, 0);">🔴</span> จุด Shut-off Head (Max. churn): แรงดันสูงสุดที่ปั๊มสร้างได้ (ประมาณ 120% ของ แรงดันกำหนดที่ผู้ใช้ป้อน)</li> <!-- Updated description here -->
                        <li id="reference_150_percent_description"><span style="color: rgba(153, 102, 255, 1);">🟣</span> จุดอ้างอิง 150% Flow, 65% Head</li>
                    </ul>
                </div>
            </div>
        </div>

        <div id="calculation_summary_section" class="pt-8">
            <h3 class="text-xl font-bold text-center text-gray-700 mb-4">
                ตารางสรุปผลการคำนวณ
            </h3>
            <table id="calculation_summary_table" class="w-full border-collapse border border-gray-300 rounded-lg overflow-hidden">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="py-2 px-4 border-b border-gray-300 text-left text-gray-700 font-normal">รายการ</th>
                        <th class="py-2 px-4 border-b border-gray-300 text-left text-gray-700 font-normal">ค่า</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="py-2 px-4 border-b border-gray-300 text-base">อัตราการไหลของน้ำดับเพลิง (Sprinkler)</td>
                        <td class="py-2 px-4 border-b border-gray-300 text-base"><span id="summary_sprinkler_flow">0.00</span> GPM</td>
                    </tr>
                    <tr>
                        <td class="py-2 px-4 border-b border-gray-300 text-base">อัตราการไหลสำหรับท่อยืน (Hose Stream Allowance)</td>
                        <td class="py-2 px-4 border-b border-gray-300 text-base"><span id="summary_hose_allowance">0.00</span> GPM</td>
                    </tr>
                    <tr id="summary_total_flow_row">
                        <td class="py-2 px-4 border-b border-gray-300 text-base">อัตราการไหลรวมที่ต้องการ </td>
                        <td class="py-2 px-4 border-b border-gray-300 text-red-600 text-base"><span id="summary_total_flow">0.00</span> GPM</td>
                    </tr>
                    <tr id="summary_demand_head_table_row">
                        <td class="py-2 px-4 border-b border-gray-300 text-base">แรงดันจุดที่ต้องการ</td>
                        <td class="py-2 px-4 border-b border-gray-300 text-red-600 text-base"><span id="summary_demand_head_table">0.00</span> PSI</td>
                    </tr>
                    <tr>
                        <td class="py-2 px-4 border-b border-gray-300 text-base">เวลากักเก็บน้ำที่คำนวณ</td>
                        <td class="py-2 px-4 border-b border-gray-300 text-base"><span id="summary_actual_duration">0</span> นาที</td>
                    </tr>
                    <tr>
                        <td class="py-2 px-4 border-b border-gray-300 text-base" id="summary_tank_volume_label">ขนาดถังเก็บน้ำที่ต้องการ</td>
                        <td class="py-2 px-4 border-b border-gray-300 text-base"><span id="summary_tank_volume">0.00</span> ลบ.ม.</td>
                    </tr>
                    <tr>
                        <td class="py-2 px-4 border-b border-gray-300 text-base">อัตราไหลของปั๊มที่ควรเลือก (โดยประมาณ)</td>
                        <td class="py-2 px-4 border-b border-gray-300 text-green-600 text-base"><span id="summary_recommended_pump_flow">0.00</span> GPM</td>
                    </tr>
                    <tr>
                        <td class="py-2 px-4 border-b border-gray-300 text-base">แรงดันปั้ม (โดยประมาณ)</td>
                        <td class="py-2 px-4 border-b border-gray-300 text-green-600 text-base"><span id="summary_estimated_pressure">0.00</span> PSI</td>
                    </tr>
                    <tr>
                        <td class="py-2 px-4 border-b border-gray-300 text-base">เลือกแรงดันปั้มสูงสุดไม่เกิน (Max. churn)</td>
                        <td class="py-2 px-4 border-b border-gray-300 text-green-600 text-base"><span id="summary_max_pressure">0.00</span> PSI</td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="print-pdf-buttons mt-6 flex flex-col space-y-4">
            <button onclick="window.print()" class="btn-secondary rounded-lg shadow-md">พิมพ์ (Print)</button>
            <small class="small-text text-center">
                สำหรับการส่งออกเป็น PDF โปรดเลือก "บันทึกเป็น PDF" ในหน้าต่างการพิมพ์ของเบราว์เซอร์
            </small>
        </div>
    </div>

    <!-- Image Popup Modal -->
    <div id="imagePopupModal" class="fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center z-50 hidden">
        <div class="bg-white p-4 rounded-lg shadow-xl relative max-w-3xl max-h-full overflow-auto">
            <button class="absolute top-2 right-2 text-gray-700 hover:text-gray-900 text-2xl font-bold" onclick="closeImagePopup()">&times;</button>
            <img id="popupImage" src="" alt="NFPA Table" class="w-full h-auto rounded-lg">
        </div>
    </div>

    <script>
        // Data อ้างอิงจาก NFPA 13 (ค่าโดยประมาณและสำหรับการสาธิต)
        const NFPA_DATA = {
            'light': { density_gpm_sqft: 0.10, hose_allowance_gpm: 100, min_duration: 30 },
            'ordinary1': { density_gpm_sqft: 0.15, hose_allowance_gpm: 250, min_duration: 60 },
            'ordinary2': { density_gpm_sqft: 0.20, hose_allowance_gpm: 250, min_duration: 60 }, // Corrected to 60 minutes
            'extra1': { density_gpm_sqft: 0.30, hose_allowance_gpm: 500, min_duration: 90 },
            'extra2': { density_gpm_sqft: 0.40, hose_allowance_gpm: 500, min_duration: 120 }
        };

        // Chart instances
        let pumpCurveChart;

        // Make conversion factors globally accessible
        window.SQ_M_TO_SQ_FT = 10.7639;
        window.US_GALLONS_TO_CUBIC_METERS = 0.00378541;

        // Make DEFAULT_PUMP_RATED_HEAD_PSI globally accessible
        window.DEFAULT_PUMP_RATED_HEAD_PSI = 100;

        // Register ChartDataLabels plugin
        Chart.register(ChartDataLabels);

        // Define all functions globally at the top of the script
        function getHeadOnPumpCurvePercentage(flowPercent, shutOffHeadMultiplier) {
            const Q_norm = flowPercent / 100; // Normalize flow to 0-1.5

            if (shutOffHeadMultiplier === 1.20) { // This means it's a vertical turbine pump (steepest curve)
                // Quadratic equation passing through (0, 120), (100, 100), (150, 65)
                // y = ax^2 + bx + c
                // c = 120 (from (0, 120))
                // 100 = a(100)^2 + b(100) + 120  => 10000a + 100b = -20  => 100a + b = -0.2
                // 65 = a(150)^2 + b(150) + 120  => 22500a + 150b = -55  => 450a + 3b = -1.1
                // Solving: a = -1/300, b = 2/15
                const a = -1/300;
                const b = 2/15;
                const c = 120;
                let head = (a * Math.pow(flowPercent, 2) + b * flowPercent + c);
                if (head < 0) head = 0; // Ensure head doesn't go negative
                return head;
            } else { // Horizontal pump (shutOffHeadMultiplier === 1.10)
                // Existing piecewise quadratic for horizontal pump
                const A_horizontal_segment2 = -1;
                const B_horizontal_segment2 = 1.8;
                const C_horizontal_segment2 = 0.2;
                const targetSlopeAt100Percent = 2 * A_horizontal_segment2 * 1 + B_horizontal_segment2;

                if (Q_norm <= 1) {
                    const c = shutOffHeadMultiplier; // This is 1.10 for horizontal
                    const a = targetSlopeAt100Percent - (1.00 - c);
                    const b = targetSlopeAt100Percent - 2 * a;
                    let head = (a * Math.pow(Q_norm, 2) + b * Q_norm + c) * 100;
                    if (head < 0) head = 0;
                    return head;
                } else {
                    let head = (A_horizontal_segment2 * Math.pow(Q_norm, 2) + B_horizontal_segment2 * Q_norm + C_horizontal_segment2) * 100;
                    if (head < 0) head = 0;
                    return head;
                }
            }
        }

        function getFlatHeadCapacityCurvePercentage(flowPercent) {
            if (flowPercent <= 100) {
                return 100; // Flat line at 100% head up to 100% flow
            } else {
                // Parabolic equation for flowPercent > 100, starting from (100, 100) and going down
                // Increased the absolute value of the coefficient to make it curve down more aggressively
                return -0.008 * Math.pow(flowPercent - 100, 2) + 100; // Changed from -0.004 to -0.008
            }
        }

        function updatePumpCurveChart(pumpRatedFlow, totalRequiredFlow, systemDemandHeadEffective, pumpType) {
            const ctx = document.getElementById('pumpCurveChart');
            if (!ctx) {
                console.error("Canvas element 'pumpCurveChart' not found.");
                return;
            }
            const chartContext = ctx.getContext('2d');

            // Define 100% references for the graph
            const graphRatedFlow = pumpRatedFlow;
            const graphRatedHead = systemDemandHeadEffective; // Use the effective head directly

            // Handle invalid inputs for graph scaling
            if (graphRatedFlow <= 0 || graphRatedHead <= 0) {
                // Clear chart or show message if essential rated values are missing
                if (pumpCurveChart) {
                    pumpCurveChart.destroy();
                    pumpCurveChart = null;
                }
                // Optionally display a message on the canvas or UI
                return;
            }

            // Calculate shut-off head based on pump type
            let shutOffHeadMultiplier;
            if (pumpType === 'vertical') {
                shutOffHeadMultiplier = 1.20; // 120% for Vertical Turbine Fire Pump
            } else {
                shutOffHeadMultiplier = 1.10; // 110% for Horizontal Fire Pump (default)
            }
            const shutOffHead = graphRatedHead * shutOffHeadMultiplier;

            // Calculate the maximum flow for the curve: 150% of rated flow + 50 GPM
            const extendedFlowGPM = (1.5 * graphRatedFlow) + 50;
            // Convert this extended flow back to a percentage of rated flow
            const maxCurveFlowPercent = Math.max(150, (extendedFlowGPM / graphRatedFlow) * 100); // Ensure it's at least 150%

            // Generate smooth curve points for Performance Curve
            const performanceCurveData = [];
            const flatHeadCapacityCurveData = []; // Data for the new parabolic flat head line
            const numCurveSegments = 100; // For smoother curve

            for (let i = 0; i <= numCurveSegments; i++) {
                const percentFlow = (i / numCurveSegments) * maxCurveFlowPercent; // Go up to maxCurveFlowPercent for the curve

                // Main Performance Curve data points are now converted to actual PSI
                const percentHeadPerformance = getHeadOnPumpCurvePercentage(percentFlow, shutOffHeadMultiplier);
                performanceCurveData.push({ x: percentFlow, y: (percentHeadPerformance / 100) * graphRatedHead });

                // Flat Head Capacity Curve data points are now converted to actual PSI
                const percentHeadFlatCapacity = getFlatHeadCapacityCurvePercentage(percentFlow);
                flatHeadCapacityCurveData.push({ x: percentFlow, y: (percentHeadFlatCapacity / 100) * graphRatedHead });
            }

            // Calculate Demand Point in percentages
            const demandFlowPercent = (totalRequiredFlow / graphRatedFlow) * 100;

            // Determine max values for axes (slightly more than max data point)
            // Max X value should be based on the extended flow percentage or demand flow percentage, whichever is higher
            let maxXValue = Math.max(maxCurveFlowPercent, demandFlowPercent) * 1.2; // Increased multiplier for padding
            // Max Y value should be based on shut-off head or effective demand head, whichever is higher
            let maxYValuePSI = Math.max(shutOffHead, graphRatedHead) * 1.5; // Changed to graphRatedHead

            // Ensure max values are reasonable minimums if inputs are small
            maxXValue = Math.max(200, maxXValue); // Minimum X-axis max to show some range (e.g., for small flows)
            maxYValuePSI = Math.max(window.DEFAULT_PUMP_RATED_HEAD_PSI * 1.5, maxYValuePSI); // Minimum Y-axis max to show some range (e.g., for small heads)


            const chartData = {
                labels: [],
                datasets: []
            };

            const chartOptions = {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    'x-axis-bottom': { // This is the bottom axis (percentage flow)
                        type: 'linear',
                        position: 'bottom',
                        title: { display: true, text: 'percent of rated capacity' }, // Changed title here
                        beginAtZero: true,
                        max: maxXValue, // This is in percentage
                        ticks: {
                            stepSize: 10, // Changed stepSize to 10 for more grid lines
                            callback: function(value) {
                                if (value % 50 === 0) { // Only show 50, 100, 150, 200
                                    return value.toFixed(0); // Display as number without unit
                                }
                                return null;
                            }
                        },
                        grid: {
                            drawOnChartArea: true, // Ensure grid lines are drawn for the primary axis
                            color: 'rgba(200, 200, 200, 0.5)', // Light grey color for grid lines
                            lineWidth: 1, // Default line width
                        }
                    },
                    'x-axis-top': { // This is the new top axis (actual GPM)
                        type: 'linear',
                        position: 'top',
                        title: { display: true, text: 'Flow (GPM)' },
                        beginAtZero: true,
                        max: (maxXValue / 100) * graphRatedFlow, // Convert max percentage flow to actual GPM
                        ticks: {
                            stepSize: (50 / 100) * graphRatedFlow, // Corresponding GPM step size for 50%
                            callback: function(value) {
                                // Only show ticks that align with 50, 100, 150, 200% flow
                                const percentValue = (value / graphRatedFlow) * 100;
                                if (percentValue % 50 === 0) {
                                    return value.toFixed(0); // Display as number without unit
                                }
                                return null;
                            }
                        },
                        grid: {
                            drawOnChartArea: false // Do not draw grid lines for the top axis
                        }
                    },
                    y: { // This is the left axis (PSI head)
                        type: 'linear',
                        position: 'left',
                        title: { display: true, text: 'แรงดัน (PSI)' }, // Changed title to PSI
                        beginAtZero: true,
                        max: maxYValuePSI, // This is in PSI
                        ticks: {
                            stepSize: 10, // Steps of 10 PSI
                            callback: function(value) {
                                return value.toFixed(0); // Display as number without unit
                            }
                        },
                        grid: {
                            drawOnChartArea: true, // Ensure grid lines are drawn for the primary axis
                            color: 'rgba(200, 200, 200, 0.5)', // Light grey color for grid lines
                            lineWidth: 1, // Default line width
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false, // Set to false to hide the legend
                    },
                    title: { display: true, text: 'กราฟ Flow Rate vs. Head (Performance Curve จำลอง)' },
                    datalabels: {
                        display: true, // Enable datalabels for points
                        color: 'black',
                        font: {
                            weight: 'normal', // Ensure normal weight as requested
                            size: 12
                        },
                        formatter: function(value, context) {
                            // Custom formatter for specific datasets - convert back to GPM/PSI for display
                            if (context.dataset.label.includes('จุด Shut-off Head')) {
                                return `Max.churn: ${value.y.toFixed(0)} PSI`; // Value.y is already PSI
                            }
                            if (context.dataset.label.includes('จุดกำหนดของปั๊ม')) {
                                // Display actual GPM and PSI
                                return `${(value.x / 100 * graphRatedFlow).toFixed(0)} GPM, ${value.y.toFixed(0)} PSI (Rated)`; // Value.y is already PSI
                            }
                            if (context.dataset.label.includes('Water Demand')) { // New formatter for Water Demand point
                                return `Demand: ${(value.x / 100 * graphRatedFlow).toFixed(0)} GPM, ${value.y.toFixed(0)} PSI`; // Now shows PSI
                            }
                            if (context.dataset.label.includes('จุดอ้างอิงที่ 150% Flow')) { // Ensure this label is formatted
                                return `${(value.x / 100 * graphRatedFlow).toFixed(0)} GPM, ${value.y.toFixed(0)} PSI`;
                            }
                            return null; // Hide datalabels for other datasets (lines)
                        },
                        align: 'top', // Default alignment for all labels
                        anchor: 'center',
                        offset: 10
                    }
                }
            };

            // Chart Data - update all datasets to use actual GPM/PSI
            chartData.datasets = [];

            // Performance Curve (Teal line) - order 5
            chartData.datasets.push({
                label: 'Performance Curve จำลอง (Pump)',
                data: performanceCurveData,
                fill: false,
                borderColor: 'rgba(0, 170, 170, 1)', /* Greenish-blue */
                borderWidth: 2, /* Thinner */
                tension: 0, // Set tension to 0 as the curve is now mathematically defined
                pointBackgroundColor: 'rgba(75, 192, 192, 1)',
                pointBorderColor: '#fff',
                pointRadius: 0, // Hide default points on the curve itself
                hoverBorderWidth: 0,
                showLine: true,
                order: 5, // Drawn last, so it's on top
                datalabels: { display: false },
                xAxisID: 'x-axis-bottom' // Explicitly assign to bottom axis
            });

            // Shut-off Head point (Dark red circle) - order 4
            chartData.datasets.push({
                type: 'scatter',
                label: `จุด Shut-off Head (Max. churn)`,
                data: [{ x: 0, y: shutOffHead }], // Y is already PSI
                backgroundColor: 'rgb(128, 0, 0)',
                borderColor: 'rgb(128, 0, 0)',
                pointRadius: 4, // Adjusted size to 4
                pointStyle: 'circle', // Changed to circle
                hoverBackgroundColor: 'rgb(128, 0, 0)',
                hoverBorderColor: '#fff',
                hoverBorderWidth: 2,
                order: 4,
                xAxisID: 'x-axis-bottom' // Explicitly assign to bottom axis
            });

            // Rated Point (Blue circle) and its associated dashed lines - order 4
            chartData.datasets.push({
                type: 'scatter',
                label: 'จุดกำหนดของปั๊ม (Rated Point)',
                data: [{ x: 100, y: graphRatedHead }], // Y is already PSI
                backgroundColor: 'rgba(0, 0, 255, 1)',
                borderColor: 'rgba(0, 0, 255, 1)',
                pointRadius: 4, // Adjusted size to 4
                pointStyle: 'circle', // Changed to circle
                hoverBackgroundColor: 'rgba(0, 0, 255, 1)',
                hoverBorderColor: '#fff',
                hoverBorderWidth: 2,
                order: 4,
                xAxisID: 'x-axis-bottom' // Explicitly assign to bottom axis
            });

            // 150% Flow, 65% Head point (Purple circle)
            chartData.datasets.push({
                type: 'scatter',
                label: 'จุดอ้างอิงที่ 150% Flow, 65% Head',
                data: [{ x: 150, y: (65 / 100) * graphRatedHead }], // Y is already PSI
                backgroundColor: 'rgba(153, 102, 255, 1)',
                borderColor: 'rgba(153, 102, 255, 1)',
                pointRadius: 4, // Adjusted size to 4
                pointStyle: 'circle', // Changed to circle
                hoverBackgroundColor: 'rgba(153, 102, 255, 1)',
                hoverBorderColor: '#fff',
                hoverBorderWidth: 2,
                order: 4, 
                datalabels: { // Override global alignment for this specific point
                    align: 'right', // Changed from 'end' to 'right'
                    offset: 10
                },
                xAxisID: 'x-axis-bottom' // Explicitly assign to bottom axis
            });

            // Water Demand Point (Red Triangle)
            // Plot if totalRequiredFlow and graphRatedFlow are positive
            if (totalRequiredFlow > 0 && graphRatedFlow > 0) { // Simplified condition
                chartData.datasets.push({
                    type: 'scatter',
                    label: `อัตราไหลรวมที่ต้องการ (Water Demand)`,
                    data: [{ x: demandFlowPercent, y: graphRatedHead }], // Use graphRatedHead for Y
                    backgroundColor: 'rgba(255, 0, 0, 1)',
                    borderColor: 'rgba(255, 0, 0, 1)',
                    pointRadius: 4, // Adjusted size to 4
                    pointStyle: 'triangle', // Changed to triangle
                    hoverBackgroundColor: 'rgba(255, 0, 0, 1)',
                    hoverBorderColor: '#fff',
                    hoverBorderWidth: 2,
                    order: 4, 
                    datalabels: { // Override global alignment for this specific point
                        align: 'bottom',
                        offset: 10
                    },
                    xAxisID: 'x-axis-bottom' // Explicitly assign to bottom axis
                });
            }

            // Add Flat Head Capacity Curve (thin dashed blue line, now parabolic)
            chartData.datasets.push({
                type: 'line',
                label: 'เส้นแสดง Flat Head Capacity Curve',
                data: flatHeadCapacityCurveData, // Use the new parabolic data
                fill: false,
                borderColor: 'rgba(0, 0, 200, 0.8)', /* Darker blue, more opaque */
                borderDash: [5, 5], // Dashed
                borderWidth: 1, /* Thinner */
                pointRadius: 0,
                hoverBorderWidth: 0,
                tension: 0, // No tension, as it's already parabolic
                order: 2, // Render above highlight, below points/performance curve
                datalabels: { display: false },
                xAxisID: 'x-axis-bottom' // Explicitly assign to bottom axis
            });

            if (pumpCurveChart) {
                pumpCurveChart.destroy(); // Destroy existing chart before creating a new one
                pumpCurveChart = null; // Clear reference
            }
            pumpCurveChart = new Chart(chartContext, {
                type: 'line',
                data: chartData,
                options: chartOptions
            });
        }


        function calculate() { // Made global
            const areaName = document.getElementById('area_name').value;
            const hazardClass = document.getElementById('hazard_class').value;
            let designAreaSqM = parseFloat(document.getElementById('design_area').value);
            const durationInput = parseInt(document.getElementById('duration').value);
            const pumpRatedFlow = parseFloat(document.getElementById('pump_rated_flow').value); 
            const systemDemandHeadInput = parseFloat(document.getElementById('system_demand_head').value); 
            const pumpType = document.getElementById('pump_type').value; // Get selected pump type

            // Define shutOffHeadMultiplier and shutOffHead here, at a higher scope
            let shutOffHeadMultiplier;
            if (pumpType === 'vertical') {
                shutOffHeadMultiplier = 1.20; // 120% for Vertical Turbine Fire Pump
            } else {
                shutOffHeadMultiplier = 1.10; // 110% for Horizontal Fire Pump (default)
            }
            // Use ratedHeadForCurve as the effective head for calculations and chart plotting
            const ratedHeadForCurve = (!isNaN(systemDemandHeadInput) && systemDemandHeadInput > 0) ? systemDemandHeadInput : window.DEFAULT_PUMP_RATED_HEAD_PSI;
            const shutOffHead = ratedHeadForCurve * shutOffHeadMultiplier; // Now shutOffHead is always defined


            const data = NFPA_DATA[hazardClass];
            let warningMessage = '';

            // Get all elements at once to avoid re-declaring them or getting null issues
            const sprinklerFlowCalculationCell = document.getElementById('sprinkler_flow_calculation_cell'); 
            const totalFlowCalculationCell = document.getElementById('total_flow_calculation_cell'); 
            const tankVolumeCalculationCell = document.getElementById('tank_volume_calculation_cell'); 
            // Removed demandHeadDisplayElement and demandHeadCalculationCell as they are no longer in the main results
            const hoseAllowanceCalculationCell = document.getElementById('hose_allowance_calculation_cell'); // New element
            const summaryTankVolumeLabel = document.getElementById('summary_tank_volume_label');
            const summaryMaxPressureElement = document.getElementById('summary_max_pressure'); 
            const shutOffHeadDescriptionEl = document.getElementById('shut_off_head_description'); 
            const reference150PercentDescriptionEl = document.getElementById('reference_150_percent_description'); // Get the new element
            const warningMessageElement = document.getElementById('warning_message'); 


            // Table rows for main results
            const sprinklerFlowEl = document.getElementById('sprinkler_flow');
            const hoseAllowanceEl = document.getElementById('hose_allowance'); // Now used for main display
            const totalFlowEl = document.getElementById('total_flow');
            const tankVolumeEl = document.getElementById('tank_volume');
            const actualDurationEl = document.getElementById('actual_duration');
            const areaNameDisplayEl = document.getElementById('area_name_display');
            const displayAreaNameElement = document.getElementById('display_area_name');

            // Summary table elements (already correct)
            const summarySprinklerFlowEl = document.getElementById('summary_sprinkler_flow');
            const summaryHoseAllowanceEl = document.getElementById('summary_hose_allowance');
            const summaryTotalFlowEl = document.getElementById('summary_total_flow');
            const summaryTankVolumeEl = document.getElementById('summary_tank_volume');
            const summaryActualDurationEl = document.getElementById('summary_actual_duration');
            const summaryRecommendedPumpFlowEl = document.getElementById('summary_recommended_pump_flow');
            const summaryEstimatedPressureEl = document.getElementById('summary_estimated_pressure');
            const summaryDemandHeadTableEl = document.getElementById('summary_demand_head_table');

            // Table row elements for visibility toggling
            // Removed demandHeadRow and demandHeadCalculationRow as they are no longer in the main results
            const hoseAllowanceRow = document.getElementById('hose_allowance_row'); // New element for visibility
            const tankVolumeRow = document.getElementById('tank_volume_row'); 
            const actualDurationRow = document.getElementById('actual_duration_row'); 
            const totalFlowRow = document.getElementById('total_flow_row'); 
            const sprinklerFlowCalculationRow = document.getElementById('sprinkler_flow_calculation_row'); 
            const totalFlowCalculationRow = document.getElementById('total_flow_calculation_row'); 
            const tankVolumeCalculationRow = document.getElementById('tank_volume_calculation_row'); 
            const hoseAllowanceCalculationRow = document.getElementById('hose_allowance_calculation_row'); // New element for visibility


            // Input validation for design area
            if (isNaN(designAreaSqM) || designAreaSqM <= 0) {
                warningMessage = 'ข้อผิดพลาด: กรุณาป้อนพื้นที่ป้องกันที่ถูกต้อง (ต้องมากกว่า 0 และเป็นตัวเลข)';
                if (warningMessageElement) { 
                    warningMessageElement.textContent = warningMessage;
                    warningMessageElement.classList.remove('hidden');
                }
                // Reset results
                if (sprinklerFlowEl) sprinklerFlowEl.textContent = '0.00';
                if (sprinklerFlowCalculationRow) sprinklerFlowCalculationRow.classList.add('hidden'); // Hide row
                if (hoseAllowanceEl) hoseAllowanceEl.textContent = '0.00'; // Reset new hose allowance display
                if (hoseAllowanceRow) hoseAllowanceRow.classList.add('hidden'); // Hide new row
                if (hoseAllowanceCalculationRow) hoseAllowanceCalculationRow.classList.add('hidden'); // Hide new row
                if (totalFlowEl) totalFlowEl.textContent = '0.00';
                if (totalFlowCalculationRow) totalFlowCalculationRow.classList.add('hidden'); // Hide row
                
                // Hide these elements in the main display (ensure they are hidden on error)
                if (tankVolumeRow) tankVolumeRow.classList.add('hidden'); // Hide row
                if (actualDurationRow) actualDurationRow.classList.add('hidden'); // Hide row
                
                if (tankVolumeEl) tankVolumeEl.textContent = '0.00';
                if (tankVolumeCalculationRow) tankVolumeCalculationRow.classList.add('hidden'); // Hide row
                if (actualDurationEl) actualDurationEl.textContent = '0';
                if (areaNameDisplayEl) areaNameDisplayEl.style.display = 'none';
                
                if (summaryMaxPressureElement) { 
                    summaryMaxPressureElement.textContent = '0.00';
                }
                
                if (summaryDemandHeadTableEl) summaryDemandHeadTableEl.textContent = '0.00'; // Reset new summary field
                updatePumpCurveChart(0, 0, 0, pumpType); // Pass pumpType
                
                if (summaryTankVolumeLabel) summaryTankVolumeLabel.textContent = 'ขนาดถังเก็บน้ำที่ต้องการ';
                
                // Reset shut-off head description on error
                if (shutOffHeadDescriptionEl) {
                    shutOffHeadDescriptionEl.innerHTML = `<span style="color: rgb(128, 0, 0);">🔴</span> จุด Shut-off Head (Max. churn): แรงดันสูงสุดที่ปั๊มสร้างได้ (ประมาณ 120% ของ แรงดันกำหนดที่ผู้ใช้ป้อน)`; // Updated text
                }
                if (reference150PercentDescriptionEl) { // Reset on error
                    reference150PercentDescriptionEl.innerHTML = `<span style="color: rgba(153, 102, 255, 1);">🟣</span> จุดอ้างอิง 150% Flow, 65% Head`;
                }
                return;
            } else {
                if (warningMessageElement) {
                    warningMessageElement.classList.add('hidden');
                }
            }

            // Convert design area from square meters to square feet for calculation
            const designAreaSqFt = designAreaSqM * window.SQ_M_TO_SQ_FT;

            // Removed specific warning messages related to NFPA 13 minimums.
            // Check minimum duration based on NFPA 13
            if (durationInput < data.min_duration) {
                warningMessage += `คำเตือน: ระยะเวลาการจ่ายน้ำขั้นต่ำที่แนะนำสำหรับ ${document.getElementById('hazard_class').options[document.getElementById('hazard_class').selectedIndex].text} คือ ${data.min_duration} นาที ตาม NFPA 13.`;
            }


            // 1. Calculate Sprinkler Flow (GPM)
            const sprinklerFlowGPM = data.density_gpm_sqft * designAreaSqFt;

            // 2. Hose Stream Allowance (GPM) - This is added to the total flow
            const hoseAllowanceGPM = data.hose_allowance_gpm;

            // 3. Total Required Flow Rate (Fire Pump Size in GPM)
            const totalFlowGPM = sprinklerFlowGPM + hoseAllowanceGPM;

            // 4. Calculate Required Tank Volume for MAIN DISPLAY (US Gallons)
            // This will ALWAYS use totalFlowGPM as per user's latest request
            const mainDisplayTankVolumeGallons = totalFlowGPM * durationInput;
            const mainDisplayTankVolumeCubicMeters = mainDisplayTankVolumeGallons * window.US_GALLONS_TO_CUBIC_METERS;

            // 5. Calculate Required Tank Volume for SUMMARY TABLE (US Gallons)
            // This prefers pumpRatedFlow if valid, otherwise falls back to totalFlowGPM
            const flowForTankCalculationForSummary = (!isNaN(pumpRatedFlow) && pumpRatedFlow > 0) ? pumpRatedFlow : totalFlowGPM;
            const summaryTankVolumeGallons = flowForTankCalculationForSummary * durationInput;
            const summaryTankVolumeCubicMeters = summaryTankVolumeGallons * window.US_GALLONS_TO_CUBIC_METERS;

            // 6. Actual Duration - This is simply the input duration based on the calculation
            const actualDurationMinutes = durationInput; 

            // Display Results (thes are the ones that stay visible in the main section)
            if (sprinklerFlowEl) sprinklerFlowEl.textContent = sprinklerFlowGPM.toFixed(2);
            if (hoseAllowanceEl) hoseAllowanceEl.textContent = hoseAllowanceGPM.toFixed(2); // Display hose allowance
            if (hoseAllowanceRow) hoseAllowanceRow.classList.remove('hidden'); // Ensure hose allowance row is visible
            
            if (totalFlowEl) totalFlowEl.textContent = totalFlowGPM.toFixed(2);
            if (totalFlowRow) totalFlowRow.classList.remove('hidden'); // Ensure it's visible

            
            // Update main display for tank volume and actual duration
            if (tankVolumeEl) tankVolumeEl.textContent = mainDisplayTankVolumeCubicMeters.toFixed(2);
            if (actualDurationEl) actualDurationEl.textContent = actualDurationMinutes;
            
            // Ensure they are visible in the main display
            if (tankVolumeRow) tankVolumeRow.classList.remove('hidden');
            if (actualDurationRow) actualDurationRow.classList.remove('hidden');


            // Update summary table (these should always be updated regardless of main display)
            if (summarySprinklerFlowEl) summarySprinklerFlowEl.textContent = sprinklerFlowGPM.toFixed(2);
            if (summaryHoseAllowanceEl) summaryHoseAllowanceEl.textContent = hoseAllowanceGPM.toFixed(2);
            if (summaryTotalFlowEl) summaryTotalFlowEl.textContent = totalFlowGPM.toFixed(2);
            if (summaryTankVolumeEl) summaryTankVolumeEl.textContent = summaryTankVolumeCubicMeters.toFixed(2); // Use summary specific value
            if (summaryActualDurationEl) summaryActualDurationEl.textContent = actualDurationMinutes;
            
            // Set the recommended pump flow from the pump_rated_flow input
            if (summaryRecommendedPumpFlowEl) summaryRecommendedPumpFlowEl.textContent = (!isNaN(pumpRatedFlow) && pumpRatedFlow > 0) ? pumpRatedFlow.toFixed(2) : '0.00';
            
            // Update the new summary_demand_head_table field
            if (summaryDemandHeadTableEl) {
                summaryDemandHeadTableEl.textContent = ratedHeadForCurve.toFixed(2); // Use ratedHeadForCurve here
            }


            // Display area name if entered
            if (areaName.trim() !== '') {
                if (displayAreaNameElement) displayAreaNameElement.textContent = areaName;
                if (areaNameDisplayEl) areaNameDisplayEl.style.display = 'block';
            } else {
                if (displayAreaNameElement) displayAreaNameElement.textContent = '';
                if (areaNameDisplayEl) areaNameDisplayEl.style.display = 'none'; 
            }

            // Set sprinkler flow calculation explanation (hidden by default)
            if (sprinklerFlowCalculationCell) sprinklerFlowCalculationCell.textContent = `วิธีการคำนวณ: พื้นที่ป้องกัน ${designAreaSqM.toFixed(2)} ตร.ม. (${designAreaSqFt.toFixed(2)} ตร.ฟุต) x อัตราหนาแน่นน้ำ ${data.density_gpm_sqft.toFixed(2)} GPM/ตร.ฟุต = ${sprinklerFlowGPM.toFixed(2)} GPM`;
            // Note: class 'hidden' is managed by toggleSprinklerCalculation()

            // Set hose allowance calculation explanation
            if (hoseAllowanceCalculationCell) hoseAllowanceCalculationCell.textContent = `วิธีการคำนวณ: อัตราการไหลสำหรับท่อยืน (Hose Stream Allowance) คือ ${hoseAllowanceGPM.toFixed(2)} GPM ตามประเภทอันตรายที่เลือก`;

            // Set total flow calculation explanation
            if (totalFlowCalculationCell) totalFlowCalculationCell.textContent = `วิธีการคำนวณ: อัตราการไหลของน้ำดับเพลิง (Sprinkler) ${sprinklerFlowGPM.toFixed(2)} GPM + อัตราการไหลสำหรับท่อยืน (Hose Stream Allowance) ${hoseAllowanceGPM.toFixed(2)} GPM = ${totalFlowGPM.toFixed(2)} GPM`;

            // Set tank volume calculation explanation for MAIN DISPLAY (now fixed to totalFlowGPM)
            if (tankVolumeCalculationCell) tankVolumeCalculationCell.textContent = `วิธีการคำนวณ: ใช้อัตราการไหลรวมที่ต้องการ : ${totalFlowGPM.toFixed(2)} GPM x ระยะเวลา ${durationInput} นาที = ${mainDisplayTankVolumeGallons.toFixed(2)} แกลลอน (${mainDisplayTankVolumeCubicMeters.toFixed(2)} ลบ.ม.)`;

            // Update dynamic label in summary table (logic remains the same for summary)
            let summaryTankVolumeLabelText;
            if (!isNaN(pumpRatedFlow) && pumpRatedFlow > 0) {
                summaryTankVolumeLabelText = `ขนาดถังเก็บน้ำที่ต้องการ (ใช้ปั๊ม: ${pumpRatedFlow.toFixed(2)} GPM)`;
            } else {
                summaryTankVolumeLabelText = `ขนาดถังเก็บน้ำที่ต้องการ (ใช้รวม: ${totalFlowGPM.toFixed(2)} GPM)`;
            }
            if (summaryTankVolumeLabel) summaryTankVolumeLabel.textContent = summaryTankVolumeLabelText;


            // Display warning if any
            if (warningMessage) {
                if (warningMessageElement) {
                    warningMessageElement.textContent = warningMessage;
                    warningMessageElement.classList.remove('hidden');
                }
            } else {
                if (warningMessageElement) {
                    warningMessageElement.classList.add('hidden');
                }
            }

            // Update display head and estimated pressure
            if (!isNaN(pumpRatedFlow) && pumpRatedFlow > 0) {
                const estimatedPressureWithAddition = ratedHeadForCurve; // Use ratedHeadForCurve here
                
                if (summaryEstimatedPressureEl) summaryEstimatedPressureEl.textContent = estimatedPressureWithAddition.toFixed(2); // Changed to toFixed(2)

                // Update the new summary_max_pressure field with null check
                if (summaryMaxPressureElement) {
                    // shutOffHead and shutOffHeadMultiplier are already defined at a higher scope
                    summaryMaxPressureElement.textContent = shutOffHead.toFixed(2);

                    // Update shut-off head description based on pumpType
                    if (shutOffHeadDescriptionEl) {
                        shutOffHeadDescriptionEl.innerHTML = `<span style="color: rgb(128, 0, 0);">🔴</span> จุด Shut-off Head (Max. churn): แรงดันสูงสุดที่ปั๊มสร้างได้ (ประมาณ ${Math.round(shutOffHeadMultiplier * 100)}% ของ แรงดันกำหนดที่ผู้ใช้ป้อน)`; // Updated text to use dynamic percentage
                    }
                }

                // Calculate and update 150% Flow, 65% Head description
                const flow150Percent = (1.5 * pumpRatedFlow);
                const head65Percent = (0.65 * ratedHeadForCurve);
                if (reference150PercentDescriptionEl) {
                    reference150PercentDescriptionEl.innerHTML = `<span style="color: rgba(153, 102, 255, 1);">🟣</span> จุดอ้างอิง 150% Flow, 65% Head`;
                }

                // Pass ratedHeadForCurve to updatePumpCurveChart for the demand point
                updatePumpCurveChart(pumpRatedFlow, totalFlowGPM, ratedHeadForCurve, pumpType); // Pass ratedHeadForCurve to chart update
            } else {
                // Clear or reset if inputs are invalid
                if (summaryEstimatedPressureEl) summaryEstimatedPressureEl.textContent = '0.00'; 
                // Clear new field on invalid input with null check
                if (summaryMaxPressureElement) {
                    summaryMaxPressureElement.textContent = '0.00'; 
                }
                // Reset shut-off head description on invalid input
                if (shutOffHeadDescriptionEl) {
                    shutOffHeadDescriptionEl.innerHTML = `<span style="color: rgb(128, 0, 0);">🔴</span> จุด Shut-off Head (Max. churn): แรงดันสูงสุดที่ปั๊มสร้างได้ (ประมาณ 110% ของ แรงดันกำหนดที่ผู้ใช้ป้อน)`; // Reset to default 110%
                }
                if (reference150PercentDescriptionEl) { // Reset on error
                    reference150PercentDescriptionEl.innerHTML = `<span style="color: rgba(153, 102, 255, 1);">🟣</span> จุดอ้างอิง 150% Flow, 65% Head`;
                }
                updatePumpCurveChart(0, 0, 0, pumpType); // Pass default pumpType to clear chart
            }
        }

        // Function to clear all input data and results
        function clearData() { // Made global
            // Get all elements at once
            const areaNameEl = document.getElementById('area_name');
            const hazardClassEl = document.getElementById('hazard_class');
            const designAreaEl = document.getElementById('design_area');
            const durationEl = document.getElementById('duration');
            const pumpRatedFlowEl = document.getElementById('pump_rated_flow');
            const systemDemandHeadEl = document.getElementById('system_demand_head');
            const pumpTypeEl = document.getElementById('pump_type'); // New element to clear
            
            // Main results display elements (now spans within table cells)
            const sprinklerFlowDisplayEl = document.getElementById('sprinkler_flow');
            const hoseAllowanceDisplayEl = document.getElementById('hose_allowance'); // New element to clear
            const totalFlowDisplayEl = document.getElementById('total_flow');
            const tankVolumeDisplayEl = document.getElementById('tank_volume');
            const actualDurationDisplayEl = document.getElementById('actual_duration');
            // Removed demandHeadDisplayEl as it's no longer in the main results

            // Summary table elements
            const summarySprinklerFlowEl = document.getElementById('summary_sprinkler_flow');
            const summaryHoseAllowanceEl = document.getElementById('summary_hose_allowance');
            const summaryTotalFlowEl = document.getElementById('summary_total_flow');
            const summaryDemandHeadTableEl = document.getElementById('summary_demand_head_table');
            const summaryTankVolumeEl = document.getElementById('summary_tank_volume');
            const summaryActualDurationEl = document.getElementById('summary_actual_duration');
            const summaryRecommendedPumpFlowEl = document.getElementById('summary_recommended_pump_flow');
            const summaryEstimatedPressureEl = document.getElementById('summary_estimated_pressure'); 
            const summaryMaxPressureElement = document.getElementById('summary_max_pressure');
            const summaryTankVolumeLabel = document.getElementById('summary_tank_volume_label');
            const shutOffHeadDescriptionEl = document.getElementById('shut_off_head_description'); 
            const reference150PercentDescriptionEl = document.getElementById('reference_150_percent_description'); // Get the new element
            
            // Containers/Rows for visibility
            const areaNameDisplayContainer = document.getElementById('area_name_display');
            const warningMessageElement = document.getElementById('warning_message');
            
            // New table rows for explanations
            const sprinklerFlowCalculationRow = document.getElementById('sprinkler_flow_calculation_row');
            const hoseAllowanceCalculationRow = document.getElementById('hose_allowance_calculation_row'); // New element
            const totalFlowCalculationRow = document.getElementById('total_flow_calculation_row'); 
            const tankVolumeCalculationRow = document.getElementById('tank_volume_calculation_row');
            // Removed demandHeadCalculationRow as it's no longer in the main results

            // Get calculation explanation cells
            const sprinklerFlowCalculationCell = document.getElementById('sprinkler_flow_calculation_cell');
            const hoseAllowanceCalculationCell = document.getElementById('hose_allowance_calculation_cell'); // New element
            const totalFlowCalculationCell = document.getElementById('total_flow_calculation_cell'); 
            const tankVolumeCalculationCell = document.getElementById('tank_volume_calculation_cell');
            // Removed demandHeadCalculationCell as it's no longer in the main results

            // Hide all calculation explanation rows
            if (sprinklerFlowCalculationRow) sprinklerFlowCalculationRow.classList.add('hidden');
            if (hoseAllowanceCalculationRow) hoseAllowanceCalculationRow.classList.add('hidden'); // Hide new row
            if (totalFlowCalculationRow) totalFlowCalculationRow.classList.add('hidden'); 
            if (tankVolumeCalculationRow) tankVolumeCalculationRow.classList.add('hidden');
            
            // Clear text content of calculation explanation cells
            if (sprinklerFlowCalculationCell) sprinklerFlowCalculationCell.textContent = '';
            if (hoseAllowanceCalculationCell) hoseAllowanceCalculationCell.textContent = ''; // Clear new cell
            if (totalFlowCalculationCell) totalFlowCalculationCell.textContent = ''; 
            if (tankVolumeCalculationCell) tankVolumeCalculationCell.textContent = '';
            

            // Set the visibility of these containers back to their initial hidden state
            const totalFlowRow = document.getElementById('total_flow_row'); 
            const hoseAllowanceRow = document.getElementById('hose_allowance_row'); // New element
            const tankVolumeRow = document.getElementById('tank_volume_row'); 
            const actualDurationRow = document.getElementById('actual_duration_row'); 
            // Removed demandHeadRow as it's no longer in the main results

            // Reset input fields
            if (areaNameEl) areaNameEl.value = '';
            if (hazardClassEl) hazardClassEl.value = 'light';
            if (designAreaEl) designAreaEl.value = '';
            if (durationEl) durationEl.value = '30';
            if (pumpRatedFlowEl) pumpRatedFlowEl.value = '';
            if (systemDemandHeadEl) systemDemandHeadEl.value = '';
            if (pumpTypeEl) pumpTypeEl.value = 'horizontal'; // Reset pump type

            // Reset main display values
            if (sprinklerFlowDisplayEl) sprinklerFlowDisplayEl.textContent = '0.00';
            if (hoseAllowanceDisplayEl) hoseAllowanceDisplayEl.textContent = '0.00'; // Reset new hose allowance display
            if (totalFlowDisplayEl) totalFlowDisplayEl.textContent = '0.00';
            if (tankVolumeDisplayEl) tankVolumeDisplayEl.textContent = '0.00';
            if (actualDurationDisplayEl) actualDurationDisplayEl.textContent = '0';
            
            // Hide main display rows that should be hidden on clear
            if (hoseAllowanceRow) hoseAllowanceRow.classList.add('hidden'); // Hide new row
            if (tankVolumeRow) tankVolumeRow.classList.add('hidden');
            if (actualDurationRow) actualDurationRow.classList.add('hidden');
            if (totalFlowRow) totalFlowRow.classList.add('hidden'); // Also hide total flow on clear

            // Reset summary table values
            if (summarySprinklerFlowEl) summarySprinklerFlowEl.textContent = '0.00';
            if (summaryHoseAllowanceEl) summaryHoseAllowanceEl.textContent = '0.00';
            if (summaryTotalFlowEl) summaryTotalFlowEl.textContent = '0.00';
            if (summaryDemandHeadTableEl) summaryDemandHeadTableEl.textContent = '0.00';
            if (summaryTankVolumeEl) summaryTankVolumeEl.textContent = '0.00';
            if (summaryActualDurationEl) summaryActualDurationEl.textContent = '0';
            if (summaryRecommendedPumpFlowEl) summaryRecommendedPumpFlowEl.textContent = '0.00';
            if (summaryEstimatedPressureEl) summaryEstimatedPressureEl.textContent = '0.00';
            if (summaryMaxPressureElement) summaryMaxPressureElement.textContent = '0.00';
            if (summaryTankVolumeLabel) summaryTankVolumeLabel.textContent = 'ขนาดถังเก็บน้ำที่ต้องการ';
            
            // Hide area name display
            if (areaNameDisplayContainer) areaNameDisplayContainer.style.display = 'none';
            // Hide warning message
            if (warningMessageElement) warningMessageElement.classList.add('hidden');

            // Reset shut-off head description on clear
            if (shutOffHeadDescriptionEl) {
                shutOffHeadDescriptionEl.innerHTML = `<span style="color: rgb(128, 0, 0);">🔴</span> จุด Shut-off Head (Max. churn): แรงดันสูงสุดที่ปั๊มสร้างได้ (ประมาณ 110% ของ แรงดันกำหนดที่ผู้ใช้ป้อน)`; // Reset to default 110%
            }
            if (reference150PercentDescriptionEl) { // Reset on clear
                reference150PercentDescriptionEl.innerHTML = `<span style="color: rgba(153, 102, 255, 1);">🟣</span> จุดอ้างอิง 150% Flow, 65% Head`;
            }

            updatePumpCurveChart(0, 0, 0, 'horizontal'); // Pass default pumpType to clear chart
        }

        // Initialize calculation on page load with default values
        document.addEventListener('DOMContentLoaded', () => {
            // Use setTimeout to ensure all global window properties are set before calculate is called
            setTimeout(calculate, 0);
        });
    </script>
</body>
</html>
